<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://shiragicord.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shiragicord.github.io/" rel="alternate" type="text/html" /><updated>2021-01-30T23:07:20+09:00</updated><id>https://shiragicord.github.io/feed.xml</id><title type="html">しらぎのLogger</title><entry><title type="html">書いた自分自身が理解できていないAtCoderのAC集</title><link href="https://shiragicord.github.io/210130/atcoder-why-ac/" rel="alternate" type="text/html" title="書いた自分自身が理解できていないAtCoderのAC集" /><published>2021-01-30T22:57:00+09:00</published><updated>2021-01-30T22:57:00+09:00</updated><id>https://shiragicord.github.io/210130/atcoder-why-ac</id><content type="html" xml:base="https://shiragicord.github.io/210130/atcoder-why-ac/">&lt;p&gt;この記事では、AtCoderに挑んだときにACが
出たには出たが、論理的に理解できていない問題を解決するために記録しておく備忘録です。&lt;/p&gt;

&lt;p&gt;つまり、この記事は、公開されているプライベート情報であり、公共的に利益はありません。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;abc190-d---staircase-sequences&quot;&gt;&lt;a href=&quot;https://atcoder.jp/contests/abc190/tasks/abc190_d&quot;&gt;ABC190 D - Staircase Sequences&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ACの提出 https://atcoder.jp/contests/abc190/submissions/19815260&lt;/p&gt;

&lt;p&gt;全ての約数において、その値が整数で成り立つ公差１の等差数列になるかを逐次検証。&lt;/p&gt;

&lt;p&gt;Nが奇数の場合、１つの約数から２つの等差数列が成り立つ可能性があることを見事に見抜いたが、
これだけでは説明できていない.&lt;/p&gt;</content><author><name></name></author><category term="AtCoder" /><category term="競技プログラミング" /><category term="備忘録" /><summary type="html">この記事では、AtCoderに挑んだときにACが 出たには出たが、論理的に理解できていない問題を解決するために記録しておく備忘録です。 つまり、この記事は、公開されているプライベート情報であり、公共的に利益はありません。</summary></entry><entry><title type="html">Android-x86 で Native Bridge がうまくいかない場合</title><link href="https://shiragicord.github.io/201220/android-x86/" rel="alternate" type="text/html" title="Android-x86 で Native Bridge がうまくいかない場合" /><published>2020-12-20T14:45:00+09:00</published><updated>2020-12-20T14:45:00+09:00</updated><id>https://shiragicord.github.io/201220/android-x86</id><content type="html" xml:base="https://shiragicord.github.io/201220/android-x86/">&lt;h1 id=&quot;前提&quot;&gt;前提&lt;/h1&gt;

&lt;blockquote&gt;

  &lt;p&gt;Android-x86_64 バージョン 9.0-rc2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;たびたびお世話になりますAndroid x86&lt;/p&gt;

&lt;p&gt;armのアプリも動けるようにlibhoudiniというものがAndroidの設定画面から有効化できるようになっています。&lt;/p&gt;

&lt;p&gt;しかし、スイッチをオンにしても/system/lib/armの中身が空っぽのままです。&lt;/p&gt;

&lt;p&gt;なぜなのかいろいろ探ってみました。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;原因&quot;&gt;原因&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/system/bin/enable_nativebridge&lt;/code&gt;をのぞいてみると、最初の方にURLがたくさん。
自力でアクセスしてみると、中国の短縮URLサービスらしきサイトが表示されました。&lt;/p&gt;

&lt;p&gt;私は中国語は理解できないので、サービスが機能していないのか、あるいは何かしないとアクセスできないのかわかりませんでした。&lt;/p&gt;

&lt;p&gt;しかし、そのサイトはリンク先のアドレスがただの赤字のテキストで書かれていたので、そのサイトに飛んでみると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;houdini.sfs&lt;/code&gt;がダウンロードされました。&lt;/p&gt;

&lt;p&gt;URL
&lt;a href=&quot;http://dl.android-x86.org/houdini.php?v=9_y&quot;&gt;http://dl.android-x86.org/houdini.php?v=9_y&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/system/bin/enable_nativebridge&lt;/code&gt;を読み進めてみると、どうやらsfsファイルを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/media/0/arm/houdini9_y.sfs&lt;/code&gt;に設置することでインストールできそうです。&lt;/p&gt;

&lt;div class=&quot;language-shell-session highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /data/media/0
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;Download/houdini.sfs arm/houdini9_y.sfs
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /system/bin/enable_nativebridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで/system/bin/armにarmのオブジェクトファイルが設置されました。&lt;/p&gt;

&lt;p&gt;なお、Androidの設定をもう一回オフオンしてしまうと、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/media/0/arm/houdini9_y.sfs&lt;/code&gt;が意味のないHTMLファイルで上書きされてしまうので、そうなってしまったらやり直しましょう。&lt;/p&gt;</content><author><name></name></author><category term="Android" /><category term="備忘録" /><summary type="html">前提 Android-x86_64 バージョン 9.0-rc2 たびたびお世話になりますAndroid x86 armのアプリも動けるようにlibhoudiniというものがAndroidの設定画面から有効化できるようになっています。 しかし、スイッチをオンにしても/system/lib/armの中身が空っぽのままです。 なぜなのかいろいろ探ってみました。</summary></entry><entry><title type="html">WindowsでSLを走らせたい</title><link href="https://shiragicord.github.io/200830/sl/" rel="alternate" type="text/html" title="WindowsでSLを走らせたい" /><published>2020-08-30T00:00:00+09:00</published><updated>2020-08-30T00:00:00+09:00</updated><id>https://shiragicord.github.io/200830/sl</id><content type="html" xml:base="https://shiragicord.github.io/200830/sl/">&lt;!--more--&gt;
&lt;h2 id=&quot;sl-for-win32-console&quot;&gt;&lt;a href=&quot;https://heropa.blogspot.com/2017/02/sl-for-win32-console.html&quot;&gt;SL for Win32 Console&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;新山(へろぱ) 様により&lt;a href=&quot;https://heropa.blogspot.com/2017/02/sl-for-win32-console.html&quot;&gt;SL for Win32 Console&lt;/a&gt;が公開されているのでそれを使えばOK。&lt;/p&gt;

&lt;p&gt;しかも音が鳴るという&lt;del&gt;謎仕様&lt;/del&gt; &lt;strong&gt;神仕様&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;windows-subsystem-for-linux&quot;&gt;Windows Subsystem for Linux&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-ps&quot;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「Windowsの機能の有効化または無効化」よりWSLを有効化。&lt;/p&gt;

&lt;p&gt;再起動後、Microsoft Storeから好きなディストリビューションをダウンロード、インストールして初期設定。&lt;/p&gt;

&lt;p&gt;その後、&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; wsl.exe
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WSL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WSL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sl
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WSL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;でSLが拝める。&lt;/p&gt;

&lt;p&gt;PATH内に&lt;/p&gt;
&lt;div class=&quot;language-bat highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@wsl.exe &lt;span class=&quot;kd&quot;&gt;sl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;をsl.batで保存すれば、直接呼べるようになる。&lt;/p&gt;

&lt;p&gt;ただ、自分の環境だとなぜか爆速でSLが走り去ってしまうので、次の方法を試した。&lt;/p&gt;

&lt;h2 id=&quot;mingw-gcc-でビルド&quot;&gt;MinGW-gcc でビルド&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/mtoyoda/sl.git
cd sl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;をして &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -o sl.exe sl.c&lt;/code&gt; でできるかと思ったらできなかったので、&lt;/p&gt;

&lt;p&gt;結果的に&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mingw-get install mingw32-libncurses # すでに行われているなら不要

Set-Variable mingw_path (MinGWのパス)
gcc -I ${mingw_path}\include\ncurses -o sl.exe sl.c ${mingw_path}\lib\libncurses.a
.\sl.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;でできた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/200830/sl/win.gif&quot; alt=&quot;実行した画面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;なんかすごい遅いけど満足満足。&lt;/p&gt;

&lt;p&gt;ちなみにこれを実行した後に、もう一回WSLで実行したらこれぐらい遅くなった…謎。&lt;/p&gt;</content><author><name></name></author><category term="Windows" /><category term="Linux" /><category term="Ubuntu" /><category term="備忘録" /><summary type="html"></summary></entry><entry><title type="html">Hello, World</title><link href="https://shiragicord.github.io/200823/hello/" rel="alternate" type="text/html" title="Hello, World" /><published>2020-08-23T00:00:00+09:00</published><updated>2020-08-23T00:00:00+09:00</updated><id>https://shiragicord.github.io/200823/hello</id><content type="html" xml:base="https://shiragicord.github.io/200823/hello/">&lt;!--more--&gt;
&lt;h1 id=&quot;hello-world&quot;&gt;Hello, World&lt;/h1&gt;

&lt;p&gt;Hello Blog!!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://shiragicord.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shiragicord.github.io/" rel="alternate" type="text/html" /><updated>2020-09-06T11:12:46+09:00</updated><id>https://shiragicord.github.io/feed.xml</id><title type="html">しらぎのLogger</title><entry><title type="html">もうYouTubeにMP4でアップロードするのやめません？</title><link href="https://shiragicord.github.io/200905/ytcodecs/" rel="alternate" type="text/html" title="もうYouTubeにMP4でアップロードするのやめません？" /><published>2020-09-05T00:00:00+09:00</published><updated>2020-09-05T00:00:00+09:00</updated><id>https://shiragicord.github.io/200905/ytcodecs</id><content type="html" xml:base="https://shiragicord.github.io/200905/ytcodecs/">&lt;blockquote&gt;
  &lt;p&gt;「動画の画質や音質なんて別に気にしてないよ」という方を対象にはしていません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今でも、YouTubeで活動されている多くの日本人は、MP4でアップロードされている動画が多いです。&lt;/p&gt;

&lt;p&gt;しかし、すでに海外では、&lt;strong&gt;WebM&lt;/strong&gt;という形式など、MP4以外のほかの形式でアップロードしている方が多く見受けられます。&lt;/p&gt;

&lt;p&gt;だから、日本人も&lt;strong&gt;WebMでアップロードしよう！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;といってもあれなので、WebMにするとどんなメリットがあるかを紹介します。&lt;/p&gt;

&lt;h2 id=&quot;youtubeはvp9で動画を再生している&quot;&gt;YouTubeは、VP9で動画を再生している。&lt;/h2&gt;
&lt;p&gt;MP4では、&lt;strong&gt;h264&lt;/strong&gt;という形式で動画がエンコードされているのが多いのに対し、WebMは、&lt;strong&gt;VP9&lt;/strong&gt;という動画でエンコードされているものがあります。&lt;/p&gt;

&lt;p&gt;で、&lt;strong&gt;VP9とは何なのか？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;簡単に言うと、&lt;strong&gt;h264&lt;/strong&gt;よりも、&lt;strong&gt;少ない容量&lt;/strong&gt;で、&lt;strong&gt;高画質な動画&lt;/strong&gt;を再生できる&lt;strong&gt;ビデオコーデック&lt;/strong&gt;というものです。 &lt;br /&gt;
(ブログ主の調査では、とある動画をエンコードしたとき、h264が&lt;strong&gt;166MB&lt;/strong&gt;だったのに対し、VP9は&lt;strong&gt;109MB&lt;/strong&gt;だった。)&lt;/p&gt;

&lt;p&gt;よく&lt;strong&gt;h264&lt;/strong&gt;動画で指摘されてい&lt;strong&gt;ブロックノイズ問題&lt;/strong&gt;も、&lt;strong&gt;VP9&lt;/strong&gt;では、それを同じ容量(ビットレート)でも&lt;strong&gt;軽減が期待できます&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;ということは、動画を作る側も、&lt;strong&gt;VP9でアップロードすれば&lt;/strong&gt;、より高画質な動画を期待できるようになります。&lt;/p&gt;

&lt;p&gt;YouTube側も、VP9のアップロード、再生に対応していて、最近では、ほとんどの動画がVP9で再生されるようになっています。&lt;/p&gt;

&lt;div style=&quot;padding: 10px; margin-bottom: 10px; border: 1px solid #000000;&quot;&gt;
&lt;img src=&quot;/200905/ytcodecs/vp9-opus.png&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;VP9&lt;/strong&gt;、&lt;strong&gt;Opus&lt;/strong&gt;を使用していると表示されているYouTubeの詳細統計情報
&lt;/div&gt;

&lt;p&gt;ただし、対応ブラウザではないと見れないので、例えば、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Internet Explorer (Windows)&lt;/li&gt;
  &lt;li&gt;Safari (macOS X)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;は&lt;strong&gt;VP9&lt;/strong&gt;非対応です。&lt;br /&gt;
(これらのブラウザでは、&lt;strong&gt;h264&lt;/strong&gt;で再生されます。)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VP9&lt;/strong&gt;で視聴するには、&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Google Chrome&lt;/li&gt;
  &lt;li&gt;FireFox&lt;/li&gt;
  &lt;li&gt;Microsoft Edge (EdgeHTML / Chromium)&lt;/li&gt;
  &lt;li&gt;その他 Chromiumベースブラウザ (Opera, Vivaldi等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等で見る必要があります。&lt;/p&gt;

&lt;p&gt;いずれのブラウザもWindows, Mac共に対応、&lt;br /&gt;
Edge以外のブラウザはLinuxにも対応しています。&lt;br /&gt;
(OS自体が動画再生の要件を満たす必要があります。)&lt;/p&gt;

&lt;h2 id=&quot;youtubeの音質はもう悪くない&quot;&gt;YouTubeの音質は、もう悪くない！&lt;/h2&gt;
&lt;p&gt;MP4では、&lt;strong&gt;AAC&lt;/strong&gt;という音声コーデックが使用されてきました。&lt;/p&gt;

&lt;p&gt;AACはMP3に比べ、比較的少ない容量でも高音質が期待できましたが、やはりCDに比べ、&lt;strong&gt;数値的には&lt;/strong&gt;劣れていました。&lt;/p&gt;

&lt;p&gt;以前はYouTube側も、最高音質&lt;strong&gt;AAC 192kbps&lt;/strong&gt;で再生されていました。&lt;/p&gt;

&lt;p&gt;(しかし、これでも音質的にはあまり違和感を感じなかった方が多いと思います。)&lt;/p&gt;

&lt;p&gt;しかし、現在では&lt;strong&gt;Opus&lt;/strong&gt;という形式で再生されています。&lt;/p&gt;

&lt;p&gt;YouTube側で再生されている、&lt;strong&gt;Opus (128kbps VBR)&lt;/strong&gt;は、ほとんどCDと聞き分けができないとされています。(下手するとハイレゾと聞き比べてもわからないほど。)&lt;/p&gt;

&lt;p&gt;具体的な数値でいうと、&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;コーデック&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;ビットレート&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;カットオフ周波数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;AAC&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128 kbps&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;15.8 kHz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128 kbps VBR&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20.0 kHz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;と、Opusの音質が圧倒的であることがわかります。&lt;br /&gt;
(カットオフ周波数が、音質のすべてはありません。)&lt;br /&gt;
(YouTubeで再生されているAACは、上の表のAACとカットオフ周波数が異なる可能性があります。)&lt;/p&gt;

&lt;p&gt;つまり、YouTubeの音質は、低い容量でも、&lt;strong&gt;人間の耳では聞き分けがかなり難しい&lt;/strong&gt;ほど品質が良くなりました。&lt;/p&gt;
&lt;div style=&quot;padding: 10px; margin-bottom: 10px; border: 1px solid #000000;&quot;&gt;
&lt;img src=&quot;/200905/ytcodecs/spectram.jpg&quot; /&gt;&lt;br /&gt;
YouTubeでOpus形式の動画を再生したときのスペクトラム画像&lt;br /&gt;
20.0kHzでカットされている。
&lt;/div&gt;

&lt;p&gt;そのため、&lt;strong&gt;AAC 320kbps&lt;/strong&gt;や&lt;strong&gt;Opus&lt;/strong&gt;、&lt;strong&gt;PCM&lt;/strong&gt;や&lt;strong&gt;FLAC&lt;/strong&gt;でアップロードすれば、充分な音質が期待できます。&lt;/p&gt;

&lt;p&gt;音質を特に気にしないでアップロードするなら、WebMのOpusで十分ですし、&lt;/p&gt;

&lt;p&gt;音質重視なら、ロスレスFLACや、PCMで&lt;strong&gt;MKV&lt;/strong&gt;に直接埋め込むことで、再エンコード回数を１回にすることができます。&lt;/p&gt;

&lt;p&gt;ただし、Opusを再生するにも、対応ブラウザが必要で、&lt;/p&gt;

&lt;p&gt;対応ブラウザ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google Chrome&lt;/li&gt;
  &lt;li&gt;FireFox&lt;/li&gt;
  &lt;li&gt;Microsoft Edge (EdgeHTML / Chromium)&lt;/li&gt;
  &lt;li&gt;その他 Chromiumベースブラウザ (Opera, Vivaldi等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;非対応ブラウザ (AACで再生)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Internet Explorer (Windows)&lt;/li&gt;
  &lt;li&gt;Safari (macOS X)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となっております。&lt;/p&gt;

&lt;h1 id=&quot;youtubeは再エンコードしている&quot;&gt;YouTubeは再エンコードしている&lt;/h1&gt;
&lt;p&gt;YouTubeに動画をアップロードするためには、動画を編集ソフトで書き出し(エンコード)を行う必要があります。しかし、YouTubeにアップロードされた動画は、YouTube側でも再書き出し(再エンコード)が行われます。&lt;/p&gt;

&lt;p&gt;そのため、アップロードされた動画がそのままの品質で再生されることはありません。&lt;/p&gt;

&lt;p&gt;しかも、MP4でアップロードされた動画も、YouTube側でWebMで再エンコードが行われるのですが、&lt;strong&gt;元(MP4)の品質が悪い&lt;/strong&gt;と、いくらWebM(VP9, Opus)でも&lt;strong&gt;元の品質よりよくなる&lt;/strong&gt;ことはありません。&lt;/p&gt;

&lt;p&gt;ということは、品質を気にするなら再エンコードされる形式よりも&lt;strong&gt;いいもので&lt;/strong&gt;アップロードする必要があります。&lt;/p&gt;

&lt;p&gt;しかし、そのためにMP4の動画容量(ビットレート)を上げるのは、&lt;strong&gt;あまり効率的ではありません&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;その代わりに、十分な品質ののWebM(VP9, Opus)にすれば、アップロード時の容量が&lt;strong&gt;MP4より小さく&lt;/strong&gt;、そしてYouTube側で&lt;strong&gt;きれいな動画&lt;/strong&gt;を再生できることが期待できます。&lt;/p&gt;

&lt;h2 id=&quot;実はvp9ももう古い&quot;&gt;実はVP9ももう古い？&lt;/h2&gt;

&lt;p&gt;先ほど、&lt;strong&gt;VP9でアップロードすることで、より高画質な動画を期待できる&lt;/strong&gt;と述べましたが、&lt;/p&gt;

&lt;p&gt;実は、YouTubeは新たなビデオコーデックへの対応が進んでいます。&lt;/p&gt;

&lt;p&gt;それは、 &lt;strong&gt;&lt;del&gt;h265 (HEVC)&lt;/del&gt;&lt;/strong&gt; ではなく、&lt;/p&gt;

&lt;p&gt;現在急上昇中の&lt;strong&gt;AV1&lt;/strong&gt;というものです。&lt;/p&gt;

&lt;div style=&quot;padding: 10px; margin-bottom: 10px; border: 1px solid #000000;&quot;&gt;
&lt;img src=&quot;/200905/ytcodecs/av1.png&quot; /&gt;&lt;br /&gt;
AV1と表示されているYouTubeの詳細統計情報&lt;br /&gt;
日本でも上位のYouTubeクリエイターでこのコーデックを再生できることが多い&lt;br /&gt;
(ただし、元がMP4なのでそこまで期待できないが)
&lt;/div&gt;

&lt;p&gt;AV1は、多くの企業に支持されている新しいコーデックで、すでにYouTubeの他にも、Netflixが対応しています。&lt;/p&gt;

&lt;p&gt;AV1は、h265 (HEVC)やVP9に比べ、さらに&lt;strong&gt;圧縮率が向上&lt;/strong&gt;していて、次の動画コーデックの&lt;strong&gt;実質標準規格になる&lt;/strong&gt;とも噂されています。&lt;/p&gt;

&lt;p&gt;ただし、まだAV1はエンコードに&lt;strong&gt;大変時間がかかり&lt;/strong&gt;、個人用途としては少し微妙です。&lt;/p&gt;

&lt;p&gt;(ブログ主の調査では、ffmpegでエンコードしたとき、AV1はVP9に比べて&lt;strong&gt;10倍遅い&lt;/strong&gt;。)&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;MP4は、今では同じ容量でも&lt;strong&gt;画質が悪い&lt;/strong&gt;、&lt;strong&gt;音も悪い&lt;/strong&gt;とメリットがないので、&lt;/p&gt;

&lt;p&gt;これからYouTubeに動画をアップロードするときは、&lt;strong&gt;WebM&lt;/strong&gt;の&lt;strong&gt;VP9&lt;/strong&gt;、&lt;strong&gt;Opus&lt;/strong&gt;でアップロードしましょう。&lt;/p&gt;

&lt;p&gt;同じ画質、音質でも動画ファイルの容量が&lt;strong&gt;小さくなること&lt;/strong&gt;が期待できます。&lt;/p&gt;

&lt;p&gt;なお、WebM形式で出力するのには、&lt;/p&gt;

&lt;p&gt;Adobe Premiere Proは追加のプラグインが必要です。&lt;/p&gt;

&lt;p&gt;AviUtlも別のプラグインが必要です。&lt;br /&gt;
ただし、AviUtlのプラグインは今のところGUIでWebMを細かく調整できるプラグインは作られていません。&lt;br /&gt;
(ただし、CUIならある。)&lt;/p&gt;

&lt;p&gt;ffmpegは、VP9, AV1, Opusともにデコード、エンコードがサポートされています。&lt;/p&gt;

&lt;p&gt;なお、おすすめの設定も載せておきます。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;解像度&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;フレーム数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;映像コーデック&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;映像ビットレート&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;音声コーデック&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;音声ビットレート&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1280x720&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1280x720&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;60 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1920x1080&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1920x1080&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;60 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2560x1440&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2560x1440&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;60 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3840x2160&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;40 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3840x2160&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;60 FPS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;VP9&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;40 Mbps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Opus&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;128kbps VBR&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="YouTube" /><category term="ファイル拡張子" /><category term="ファイルフォーマット" /><summary type="html">「動画の画質や音質なんて別に気にしてないよ」という方を対象にはしていません。 今でも、YouTubeで活動されている多くの日本人は、MP4でアップロードされている動画が多いです。 しかし、すでに海外では、WebMという形式など、MP4以外のほかの形式でアップロードしている方が多く見受けられます。 だから、日本人もWebMでアップロードしよう！ といってもあれなので、WebMにするとどんなメリットがあるかを紹介します。 YouTubeは、VP9で動画を再生している。 MP4では、h264という形式で動画がエンコードされているのが多いのに対し、WebMは、VP9という動画でエンコードされているものがあります。 で、VP9とは何なのか？ 簡単に言うと、h264よりも、少ない容量で、高画質な動画を再生できるビデオコーデックというものです。 (ブログ主の調査では、とある動画をエンコードしたとき、h264が166MBだったのに対し、VP9は109MBだった。) よくh264動画で指摘されていブロックノイズ問題も、VP9では、それを同じ容量(ビットレート)でも軽減が期待できます。 ということは、動画を作る側も、VP9でアップロードすれば、より高画質な動画を期待できるようになります。 YouTube側も、VP9のアップロード、再生に対応していて、最近では、ほとんどの動画がVP9で再生されるようになっています。 VP9、Opusを使用していると表示されているYouTubeの詳細統計情報 ただし、対応ブラウザではないと見れないので、例えば、 Internet Explorer (Windows) Safari (macOS X) はVP9非対応です。 (これらのブラウザでは、h264で再生されます。) VP9で視聴するには、 Google Chrome FireFox Microsoft Edge (EdgeHTML / Chromium) その他 Chromiumベースブラウザ (Opera, Vivaldi等) 等で見る必要があります。 いずれのブラウザもWindows, Mac共に対応、 Edge以外のブラウザはLinuxにも対応しています。 (OS自体が動画再生の要件を満たす必要があります。) YouTubeの音質は、もう悪くない！ MP4では、AACという音声コーデックが使用されてきました。 AACはMP3に比べ、比較的少ない容量でも高音質が期待できましたが、やはりCDに比べ、数値的には劣れていました。 以前はYouTube側も、最高音質AAC 192kbpsで再生されていました。 (しかし、これでも音質的にはあまり違和感を感じなかった方が多いと思います。) しかし、現在ではOpusという形式で再生されています。 YouTube側で再生されている、Opus (128kbps VBR)は、ほとんどCDと聞き分けができないとされています。(下手するとハイレゾと聞き比べてもわからないほど。) 具体的な数値でいうと、 コーデック ビットレート カットオフ周波数 AAC 128 kbps 15.8 kHz Opus 128 kbps VBR 20.0 kHz と、Opusの音質が圧倒的であることがわかります。 (カットオフ周波数が、音質のすべてはありません。) (YouTubeで再生されているAACは、上の表のAACとカットオフ周波数が異なる可能性があります。) つまり、YouTubeの音質は、低い容量でも、人間の耳では聞き分けがかなり難しいほど品質が良くなりました。 YouTubeでOpus形式の動画を再生したときのスペクトラム画像 20.0kHzでカットされている。 そのため、AAC 320kbpsやOpus、PCMやFLACでアップロードすれば、充分な音質が期待できます。 音質を特に気にしないでアップロードするなら、WebMのOpusで十分ですし、 音質重視なら、ロスレスFLACや、PCMでMKVに直接埋め込むことで、再エンコード回数を１回にすることができます。 ただし、Opusを再生するにも、対応ブラウザが必要で、 対応ブラウザ Google Chrome FireFox Microsoft Edge (EdgeHTML / Chromium) その他 Chromiumベースブラウザ (Opera, Vivaldi等) 非対応ブラウザ (AACで再生) Internet Explorer (Windows) Safari (macOS X) となっております。 YouTubeは再エンコードしている YouTubeに動画をアップロードするためには、動画を編集ソフトで書き出し(エンコード)を行う必要があります。しかし、YouTubeにアップロードされた動画は、YouTube側でも再書き出し(再エンコード)が行われます。 そのため、アップロードされた動画がそのままの品質で再生されることはありません。 しかも、MP4でアップロードされた動画も、YouTube側でWebMで再エンコードが行われるのですが、元(MP4)の品質が悪いと、いくらWebM(VP9, Opus)でも元の品質よりよくなることはありません。 ということは、品質を気にするなら再エンコードされる形式よりもいいものでアップロードする必要があります。 しかし、そのためにMP4の動画容量(ビットレート)を上げるのは、あまり効率的ではありません。 その代わりに、十分な品質ののWebM(VP9, Opus)にすれば、アップロード時の容量がMP4より小さく、そしてYouTube側できれいな動画を再生できることが期待できます。 実はVP9ももう古い？ 先ほど、VP9でアップロードすることで、より高画質な動画を期待できると述べましたが、 実は、YouTubeは新たなビデオコーデックへの対応が進んでいます。 それは、 h265 (HEVC) ではなく、 現在急上昇中のAV1というものです。 AV1と表示されているYouTubeの詳細統計情報 日本でも上位のYouTubeクリエイターでこのコーデックを再生できることが多い (ただし、元がMP4なのでそこまで期待できないが) AV1は、多くの企業に支持されている新しいコーデックで、すでにYouTubeの他にも、Netflixが対応しています。 AV1は、h265 (HEVC)やVP9に比べ、さらに圧縮率が向上していて、次の動画コーデックの実質標準規格になるとも噂されています。 ただし、まだAV1はエンコードに大変時間がかかり、個人用途としては少し微妙です。 (ブログ主の調査では、ffmpegでエンコードしたとき、AV1はVP9に比べて10倍遅い。) まとめ MP4は、今では同じ容量でも画質が悪い、音も悪いとメリットがないので、 これからYouTubeに動画をアップロードするときは、WebMのVP9、Opusでアップロードしましょう。 同じ画質、音質でも動画ファイルの容量が小さくなることが期待できます。 なお、WebM形式で出力するのには、 Adobe Premiere Proは追加のプラグインが必要です。 AviUtlも別のプラグインが必要です。 ただし、AviUtlのプラグインは今のところGUIでWebMを細かく調整できるプラグインは作られていません。 (ただし、CUIならある。) ffmpegは、VP9, AV1, Opusともにデコード、エンコードがサポートされています。 なお、おすすめの設定も載せておきます。 解像度 フレーム数 映像コーデック 映像ビットレート 音声コーデック 音声ビットレート 1280x720 30 FPS VP9 5 Mbps Opus 128kbps VBR 1280x720 60 FPS VP9 5 Mbps Opus 128kbps VBR 1920x1080 30 FPS VP9 10 Mbps Opus 128kbps VBR 1920x1080 60 FPS VP9 10 Mbps Opus 128kbps VBR 2560x1440 30 FPS VP9 20 Mbps Opus 128kbps VBR 2560x1440 60 FPS VP9 20 Mbps Opus 128kbps VBR 3840x2160 30 FPS VP9 40 Mbps Opus 128kbps VBR 3840x2160 60 FPS VP9 40 Mbps Opus 128kbps VBR</summary></entry><entry><title type="html">WindowsでSLを走らせたい</title><link href="https://shiragicord.github.io/200830/sl/" rel="alternate" type="text/html" title="WindowsでSLを走らせたい" /><published>2020-08-30T00:00:00+09:00</published><updated>2020-08-30T00:00:00+09:00</updated><id>https://shiragicord.github.io/200830/sl</id><content type="html" xml:base="https://shiragicord.github.io/200830/sl/">&lt;h2 id=&quot;sl-for-win32-console&quot;&gt;&lt;a href=&quot;https://heropa.blogspot.com/2017/02/sl-for-win32-console.html&quot;&gt;SL for Win32 Console&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;新山(へろぱ) 様により&lt;a href=&quot;https://heropa.blogspot.com/2017/02/sl-for-win32-console.html&quot;&gt;SL for Win32 Console&lt;/a&gt;が公開されているのでそれを使えばOK。&lt;/p&gt;

&lt;p&gt;しかも音が鳴るという&lt;del&gt;謎仕様&lt;/del&gt; &lt;strong&gt;神仕様&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;windows-subsystem-for-linux&quot;&gt;Windows Subsystem for Linux&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-ps&quot;&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;「Windowsの機能の有効化または無効化」よりWSLを有効化。&lt;/p&gt;

&lt;p&gt;再起動後、Microsoft Storeから好きなディストリビューションをダウンロード、インストールして初期設定。&lt;/p&gt;

&lt;p&gt;その後、&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; wsl.exe
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WSL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WSL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sl
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WSL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;でSLが拝める。&lt;/p&gt;

&lt;p&gt;PATH内に&lt;/p&gt;
&lt;div class=&quot;language-bat highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@wsl.exe &lt;span class=&quot;kd&quot;&gt;sl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;をsl.batで保存すれば、直接呼べるようになる。&lt;/p&gt;

&lt;p&gt;ただ、自分の環境だとなぜか爆速でSLが走り去ってしまうので、次の方法を試した。&lt;/p&gt;

&lt;h2 id=&quot;mingw-gcc-でビルド&quot;&gt;MinGW-gcc でビルド&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-ps&quot;&gt;git clone https://github.com/mtoyoda/sl.git
cd sl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;をして &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc -o sl.exe sl.c&lt;/code&gt; でできるかと思ったらできなかったので、&lt;/p&gt;

&lt;p&gt;結果的に&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ps&quot;&gt;mingw-get install mingw32-libncurses # すでに行われているなら不要

Set-Variable mingw_path (MinGWのパス)
gcc -I ${mingw_path}\include\ncurses -o sl.exe sl.c ${mingw_path}\lib\libncurses.a
.\sl.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でできた。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/200830-sl-win.gif&quot; alt=&quot;実行した画面&quot; /&gt;&lt;/p&gt;

&lt;p&gt;なんかすごい遅いけど満足満足。&lt;/p&gt;

&lt;p&gt;ちなみにこれを実行した後に、もう一回WSLで実行したらこれぐらい遅くなった…謎。&lt;/p&gt;</content><author><name></name></author><category term="Windows" /><category term="Linux" /><category term="Ubuntu" /><category term="備忘録" /><summary type="html">SL for Win32 Console 新山(へろぱ) 様によりSL for Win32 Consoleが公開されているのでそれを使えばOK。 しかも音が鳴るという謎仕様 神仕様。 Windows Subsystem for Linux dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all 「Windowsの機能の有効化または無効化」よりWSLを有効化。 再起動後、Microsoft Storeから好きなディストリビューションをダウンロード、インストールして初期設定。 その後、 PS &amp;gt; wsl.exe (WSL) $ sudo apt update (WSL) $ sudo apt install sl (WSL) $ sl でSLが拝める。 PATH内に @wsl.exe sl %*% をsl.batで保存すれば、直接呼べるようになる。 ただ、自分の環境だとなぜか爆速でSLが走り去ってしまうので、次の方法を試した。 MinGW-gcc でビルド git clone https://github.com/mtoyoda/sl.git cd sl をして gcc -o sl.exe sl.c でできるかと思ったらできなかったので、 結果的に mingw-get install mingw32-libncurses # すでに行われているなら不要 Set-Variable mingw_path (MinGWのパス) gcc -I ${mingw_path}\include\ncurses -o sl.exe sl.c ${mingw_path}\lib\libncurses.a .\sl.exe でできた。 なんかすごい遅いけど満足満足。 ちなみにこれを実行した後に、もう一回WSLで実行したらこれぐらい遅くなった…謎。</summary></entry><entry><title type="html">Hello, World</title><link href="https://shiragicord.github.io/200823/hello/" rel="alternate" type="text/html" title="Hello, World" /><published>2020-08-23T00:00:00+09:00</published><updated>2020-08-23T00:00:00+09:00</updated><id>https://shiragicord.github.io/200823/hello</id><content type="html" xml:base="https://shiragicord.github.io/200823/hello/">&lt;h1 id=&quot;hello-world&quot;&gt;Hello, World&lt;/h1&gt;

&lt;p&gt;Hello Blog!!&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello, World Hello Blog!!</summary></entry></feed>
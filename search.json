[

{
"id": "-210130-atcoder-why-ac",
"title": "書いた自分自身が理解できていないAtCoderのAC集",
"author": null,
"tags": ["AtCoder", "競技プログラミング", "備忘録"],
"url": "/210130/atcoder-why-ac/",
"date": "2021-01-30",
"content": "ABC190 D - Staircase SequencesACの提出 https://atcoder.jp/contests/abc190/submissions/19815260全ての約数において、その値が整数で成り立つ公差１の等差数列になるかを逐次検証。Nが奇数の場合、１つの約数から２つの等差数列が成り立つ可能性があることを見事に見抜いたが、これだけでは説明できていない."
}, 

{
"id": "-201220-android-x86",
"title": "Android-x86 で Native Bridge がうまくいかない場合",
"author": null,
"tags": ["Android", "備忘録"],
"url": "/201220/android-x86/",
"date": "2020-12-20",
"content": "前提  Android-x86_64 バージョン 9.0-rc2たびたびお世話になりますAndroid x86armのアプリも動けるようにlibhoudiniというものがAndroidの設定画面から有効化できるようになっています。しかし、スイッチをオンにしても/system/lib/armの中身が空っぽのままです。なぜなのかいろいろ探ってみました。原因/system/bin/enable_nativebridgeをのぞいてみると、最初の方にURLがたくさん。自力でアクセスしてみると、中国の短縮URLサービスらしきサイトが表示されました。私は中国語は理解できないので、サービスが機能していないのか、あるいは何かしないとアクセスできないのかわかりませんでした。しかし、そのサイトはリンク先のアドレスがただの赤字のテキストで書かれていたので、そのサイトに飛んでみると、houdini.sfsがダウンロードされました。URLhttp://dl.android-x86.org/houdini.php?v=9_y/system/bin/enable_nativebridgeを読み進めてみると、どうやらsfsファイルを/data/media/0/arm/houdini9_y.sfsに設置することでインストールできそうです。# cd /data/media/0# cp Download/houdini.sfs arm/houdini9_y.sfs# . /system/bin/enable_nativebridgeこれで/system/bin/armにarmのオブジェクトファイルが設置されました。なお、Androidの設定をもう一回オフオンしてしまうと、/data/media/0/arm/houdini9_y.sfsが意味のないHTMLファイルで上書きされてしまうので、そうなってしまったらやり直しましょう。"
}, 

{
"id": "-200830-sl",
"title": "WindowsでSLを走らせたい",
"author": null,
"tags": ["Windows", "Linux", "Ubuntu", "備忘録"],
"url": "/200830/sl/",
"date": "2020-08-30",
"content": "SL for Win32 Console新山(へろぱ) 様によりSL for Win32 Consoleが公開されているのでそれを使えばOK。しかも音が鳴るという謎仕様 神仕様。Windows Subsystem for Linuxdism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all「Windowsの機能の有効化または無効化」よりWSLを有効化。再起動後、Microsoft Storeから好きなディストリビューションをダウンロード、インストールして初期設定。その後、PS &gt; wsl.exe(WSL) $ sudo apt update(WSL) $ sudo apt install sl(WSL) $ slでSLが拝める。PATH内に@wsl.exe sl %*%をsl.batで保存すれば、直接呼べるようになる。ただ、自分の環境だとなぜか爆速でSLが走り去ってしまうので、次の方法を試した。MinGW-gcc でビルドgit clone https://github.com/mtoyoda/sl.gitcd slをして gcc -o sl.exe sl.c でできるかと思ったらできなかったので、結果的にmingw-get install mingw32-libncurses # すでに行われているなら不要Set-Variable mingw_path (MinGWのパス)gcc -I ${mingw_path}\\include\\ncurses -o sl.exe sl.c ${mingw_path}\\lib\\libncurses.a.\\sl.exeでできた。なんかすごい遅いけど満足満足。ちなみにこれを実行した後に、もう一回WSLで実行したらこれぐらい遅くなった…謎。"
}, 

{
"id": "-200823-hello",
"title": "Hello, World",
"author": null,
"tags": [],
"url": "/200823/hello/",
"date": "2020-08-23",
"content": "Hello, WorldHello Blog!!"
}

]

[

{
"id": "-201220-android-x86",
"title": "Android-x86 で Native Bridge がうまくいかない場合",
"author": null,
"tags": ["Android", "備忘録"],
"url": "/201220/android-x86/",
"date": "2020-12-20",
"content": "前提  Android-x86_64 バージョン 9.0-rc2たびたびお世話になりますAndroid x86armのアプリも動けるようにlibhoudiniというものがAndroidの設定画面から有効化できるようになっています。しかし、スイッチをオンにしても/system/lib/armの中身が空っぽのままです。なぜなのかいろいろ探ってみました。原因/system/bin/enable_nativebridgeをのぞいてみると、最初の方にURLがたくさん。自力でアクセスしてみると、中国の短縮URLサービスらしきサイトが表示されました。私は中国語は理解できないので、サービスが機能していないのか、あるいは何かしないとアクセスできないのかわかりませんでした。しかし、そのサイトはリンク先のアドレスがただの赤字のテキストで書かれていたので、そのサイトに飛んでみると、houdini.sfsがダウンロードされました。URLhttp://dl.android-x86.org/houdini.php?v=9_y/system/bin/enable_nativebridgeを読み進めてみると、どうやらsfsファイルを/data/media/0/arm/houdini9_y.sfsに設置することでインストールできそうです。# cd /data/media/0# cp Download/houdini.sfs arm/houdini9_y.sfs# . /system/bin/enable_nativebridgeこれで/system/bin/armにarmのオブジェクトファイルが設置されました。なお、Androidの設定をもう一回オフオンしてしまうと、/data/media/0/arm/houdini9_y.sfsが意味のないHTMLファイルで上書きされてしまうので、そうなってしまったらやり直しましょう。"
}, 

{
"id": "-201103-wt",
"title": "Windows Terminalをそのディレクトリで開くために",
"author": null,
"tags": ["Windows", "WindowsTerminal", "備忘録"],
"url": "/201103/wt/",
"date": "2020-11-03",
"content": "前提  Windows 10 Home 64-bit Version 20H2  Windows Terminal 1.3.2651.0  レジストリ改変時は、事前のバックアップ(エクスポート)を忘れずに！高機能で使いやすく、開発も活発なWindows Terminal現時点でカレントディレクトリから開くのがまだまだなので、独自にビルドせずに自分で実装してみました。カレントディレクトリで開くにはGithubのリポジトリでこのissueを発見しました。wt -d .またはwt -d &lt;パス&gt;でできる模様です。コマンドラインからの起動の方法を改変このような操作をしたときに、エクスプローラーのカレントディレクトリで起動できるようにします。起動用exeを作成class Program{    public static void Main(string[] args)    {        var envPathLocalAppData = Environment.GetEnvironmentVariable(\"LOCALAPPDATA\");        Process.Start(envPathLocalAppData + \"\\\\Microsoft\\\\WindowsApps\\\\wt.exe\", \"-d .\");    }}バッチファイルやVBScriptだと、レジストリPathが動作しないので、exeファイルとして作りました。環境変数Pathを作って、既存のレジストリPathを消去する場合はバッチファイルでできます。レジストリの編集HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\wt.exeの既定値を作成したexeのパス、Path値をexeのあるフォルダパスに設定します。explorer.exeの再起動できました。ただし、これだといつかレジストリ設定が戻されるので、スタートアップなりサービスなりで値を保護する必要がありそうです。もしくは、UWPアプリを自作してwt.exeとして起動するように定義すれば…右クリックメニューを追加現バージョンでは、フォルダーの選択時にOpen in Windows Terminalが表示されますが、何もない場所を右クリックして開けるようにしたい。これは、レジストリを改変するだけで行けました。[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\Directory\\Background\\shell\\WindowsTerminal]@=\"Windows Terminal をここで開く\"[HKEY_CURRENT_USER\\SOFTWARE\\Classes\\Directory\\Background\\shell\\WindowsTerminal\\command]@=\"C:\\\\Users\\\\(ユーザー名)\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe -d .\""
}, 

{
"id": "-200830-sl",
"title": "WindowsでSLを走らせたい",
"author": null,
"tags": ["Windows", "Linux", "Ubuntu", "備忘録"],
"url": "/200830/sl/",
"date": "2020-08-30",
"content": "SL for Win32 Console新山(へろぱ) 様によりSL for Win32 Consoleが公開されているのでそれを使えばOK。しかも音が鳴るという謎仕様 神仕様。Windows Subsystem for Linuxdism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all「Windowsの機能の有効化または無効化」よりWSLを有効化。再起動後、Microsoft Storeから好きなディストリビューションをダウンロード、インストールして初期設定。その後、PS &gt; wsl.exe(WSL) $ sudo apt update(WSL) $ sudo apt install sl(WSL) $ slでSLが拝める。PATH内に@wsl.exe sl %*%をsl.batで保存すれば、直接呼べるようになる。ただ、自分の環境だとなぜか爆速でSLが走り去ってしまうので、次の方法を試した。MinGW-gcc でビルドgit clone https://github.com/mtoyoda/sl.gitcd slをして gcc -o sl.exe sl.c でできるかと思ったらできなかったので、結果的にmingw-get install mingw32-libncurses # すでに行われているなら不要Set-Variable mingw_path (MinGWのパス)gcc -I ${mingw_path}\\include\\ncurses -o sl.exe sl.c ${mingw_path}\\lib\\libncurses.a.\\sl.exeでできた。なんかすごい遅いけど満足満足。ちなみにこれを実行した後に、もう一回WSLで実行したらこれぐらい遅くなった…謎。"
}, 

{
"id": "-200823-hello",
"title": "Hello, World",
"author": null,
"tags": [],
"url": "/200823/hello/",
"date": "2020-08-23",
"content": "Hello, WorldHello Blog!!"
}

]
